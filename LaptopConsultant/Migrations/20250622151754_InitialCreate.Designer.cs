// <auto-generated />
using System;
using LaptopConsultant.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LaptopConsultant.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250622151754_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LaptopConsultant.Models.FilterCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brands")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MaxBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("MaxWeight")
                        .HasColumnType("float");

                    b.Property<decimal?>("MinBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Needs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RAM")
                        .HasColumnType("int");

                    b.Property<int?>("SSD")
                        .HasColumnType("int");

                    b.Property<double?>("ScreenSize")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("FilterCriterias");
                });

            modelBuilder.Entity("LaptopConsultant.Models.FilterCriteriaCPU", b =>
                {
                    b.Property<int>("FilterCriteriaId")
                        .HasColumnType("int");

                    b.Property<string>("CPU")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FilterCriteriaId", "CPU");

                    b.ToTable("FilterCriteriaCPUs");
                });

            modelBuilder.Entity("LaptopConsultant.Models.FilterCriteriaGPU", b =>
                {
                    b.Property<int>("FilterCriteriaId")
                        .HasColumnType("int");

                    b.Property<string>("GPU")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FilterCriteriaId", "GPU");

                    b.ToTable("FilterCriteriaGPUs");
                });

            modelBuilder.Entity("LaptopConsultant.Models.Laptop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GPU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PurchaseLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RAM")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("SSD")
                        .HasColumnType("int");

                    b.Property<double>("ScreenSize")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Laptops");
                });

            modelBuilder.Entity("LaptopConsultant.Models.LaptopNeed", b =>
                {
                    b.Property<int>("LaptopId")
                        .HasColumnType("int");

                    b.Property<string>("Need")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LaptopId", "Need");

                    b.ToTable("LaptopNeeds");
                });

            modelBuilder.Entity("LaptopConsultant.Models.UserSelection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("MaxBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SelectedLaptopId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SelectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SelectedLaptopId");

                    b.ToTable("UserSelections");
                });

            modelBuilder.Entity("LaptopConsultant.Models.UserSelectionBrand", b =>
                {
                    b.Property<int>("UserSelectionId")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserSelectionId", "Brand");

                    b.ToTable("UserSelectionBrands");
                });

            modelBuilder.Entity("LaptopConsultant.Models.UserSelectionNeed", b =>
                {
                    b.Property<int>("UserSelectionId")
                        .HasColumnType("int");

                    b.Property<string>("Need")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserSelectionId", "Need");

                    b.ToTable("UserSelectionNeeds");
                });

            modelBuilder.Entity("LaptopConsultant.Models.FilterCriteriaCPU", b =>
                {
                    b.HasOne("LaptopConsultant.Models.FilterCriteria", "FilterCriteria")
                        .WithMany("CPUs")
                        .HasForeignKey("FilterCriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilterCriteria");
                });

            modelBuilder.Entity("LaptopConsultant.Models.FilterCriteriaGPU", b =>
                {
                    b.HasOne("LaptopConsultant.Models.FilterCriteria", "FilterCriteria")
                        .WithMany("GPUs")
                        .HasForeignKey("FilterCriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilterCriteria");
                });

            modelBuilder.Entity("LaptopConsultant.Models.LaptopNeed", b =>
                {
                    b.HasOne("LaptopConsultant.Models.Laptop", "Laptop")
                        .WithMany("Needs")
                        .HasForeignKey("LaptopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laptop");
                });

            modelBuilder.Entity("LaptopConsultant.Models.UserSelection", b =>
                {
                    b.HasOne("LaptopConsultant.Models.Laptop", "SelectedLaptop")
                        .WithMany()
                        .HasForeignKey("SelectedLaptopId");

                    b.Navigation("SelectedLaptop");
                });

            modelBuilder.Entity("LaptopConsultant.Models.UserSelectionBrand", b =>
                {
                    b.HasOne("LaptopConsultant.Models.UserSelection", "UserSelection")
                        .WithMany("SelectedBrands")
                        .HasForeignKey("UserSelectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserSelection");
                });

            modelBuilder.Entity("LaptopConsultant.Models.UserSelectionNeed", b =>
                {
                    b.HasOne("LaptopConsultant.Models.UserSelection", "UserSelection")
                        .WithMany("SelectedNeeds")
                        .HasForeignKey("UserSelectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserSelection");
                });

            modelBuilder.Entity("LaptopConsultant.Models.FilterCriteria", b =>
                {
                    b.Navigation("CPUs");

                    b.Navigation("GPUs");
                });

            modelBuilder.Entity("LaptopConsultant.Models.Laptop", b =>
                {
                    b.Navigation("Needs");
                });

            modelBuilder.Entity("LaptopConsultant.Models.UserSelection", b =>
                {
                    b.Navigation("SelectedBrands");

                    b.Navigation("SelectedNeeds");
                });
#pragma warning restore 612, 618
        }
    }
}
